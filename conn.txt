
!uptime
set line 200
col MACHINE for a25
set pages 50
col RESOURCE_NAME for a15
col LIMIT_VALUE for a10
col INITIAL_ALLOCATION for a20
col status for a15

Prompt Checking User Session State , BG (Oracle BACKGROUND Processes)...............
select * from v$resource_limit where RESOURCE_NAME='processes';

select inst_id,count(1) from gv$session group by inst_id order by 2;

select inst_id,decode(status,'ACTIVE','ACTIVE-USERS','INACTIVE-USERS') status,count(1) from gv$session where type='USER'  group by inst_id,status
                        union
select inst_id,decode(status,'ACTIVE','ACTIVE-BG','INACTIVE-BG') status,count(1) from gv$session where type='BACKGROUND' group by inst_id,status order by 1,3 desc;

                        select inst_id,machine, status,count(1)
                        from gv$session
                        where type='USER'
                        and status='ACTIVE'
                        group by inst_id,machine, status
                        order by 1, 4 desc;

Prompt Checking User-Schema wise connections...............
col username for a17
select inst_id,username,count(1) from gv$session group by inst_id,username order by 1,3 desc;

Prompt Checking User-Schema-status wise connections...............
col username for a17
select inst_id,username,status,count(1) from gv$session group by inst_id,username,status order by 1,2,4 desc;


Prompt Checking Machine wise connections ......................
 col DB_NAME for a10
 col db_server_name for a25
 col CLIENT_APP_MACHINE  for a28
 col CURR_DATE for a25

 set line 200
 set pages 100
 select s.inst_id,to_char(sysdate,'yyyy/mm/dd hh24:mi:ss') curr_date,
 sys_context('USERENV','DB_NAME')                db_name,
 sys_context('USERENV','SERVER_HOST')            db_server_name,
 t.tot_conn                                      curr_tot_db_session,
 machine client_app_machine,count(1)             client_tot_conn_estab
 from gv$session s,  (select inst_id,count(1) tot_conn from gv$session group by inst_id )  t
 where s.inst_id=t.inst_id
 group by s.inst_id,t.tot_conn,machine order by 1,7;

!uptime
REM exit;

Prompt Checking Current Wait events from v$session ..........................
Prompt ==============================================================================================================
col event for a40
select event,count(1) from v$session where  status='ACTIVE' and type='USER' group by event order by 2 desc;


Prompt Checking INACTIVE with MIN and MAX time ..........................
Prompt ==============================================================================================================
col MIN_LOGON_TIME for a25
col MAX_LOGON_TIME for a25
set line 200
set pages 50
col machine for a30
select *
from
(
Select INST_ID,machine, STATUS,COUNT(1), to_char(min(LOGON_TIME),'DD-MON-YYYY hh24:mi:ss') MIN_LOGON_TIME ,
to_char(max(LOGON_TIME),'DD-MON-YYYY hh24:mi:ss') MAX_LOGON_TIME
from gv$session where type='USER' and status='INACTIVE'
group by INST_ID, machine,STATUS
)
order by INST_ID,MACHINE,MIN_LOGON_TIME ;


Prompt What PL-SQL program is currently running
Prompt ==============================================================================================================

col OBJECT_NAME for a30
col USERNAME for a15
col OWNER for a15
col EVENT for a20
select sid,serial#,s.sql_id,s.username,o.owner,o.object_name,o.object_type,s.status,event,last_call_et/60 mins 
from v$session s , dba_objects o
where s.PLSQL_ENTRY_OBJECT_ID=o.object_id
and s.PLSQL_ENTRY_OBJECT_ID > 0;

prompt Checking Schedular job Running ..................
Prompt ==============================================================================================================

set line 200
col JOB_NAME for a30
col MACHINE for a20
col MODULE for a20
col OSUSER for a10
col STATUS for a10

select   s.SID,
s.SERIAL#,
j.job_name,s.machine,
--s.EVENT,
s.module,
	 s.SQL_ID,
         s.USERNAME,
         s.OSUSER,
         s.STATUS,round(s.last_call_et/60) mins
from     gv$session s,gv$process p , dba_scheduler_running_jobs j
where s.paddr=p.addr 
and s.INST_ID=p.INST_ID
and s.SID =j.session_id
and s.INST_ID=j.running_instance
order by s.INST_ID,s.last_call_et;

prompt Average Single Block Read Latency for Past One hour ..................
Prompt ============================================================================================================== 
set lines 500 pages 500
col BEGIN_TIME for a19
col END_TIME for a19
col METRIC_NAME for a45
col METRIC_UNIT for a15

select to_char(BEGIN_TIME,'DD-MON-YY HH24:Mi:SS')BEGIN_TIME, to_char(END_TIME,'DD-MON-YY HH24:Mi:SS') END_TIME, METRIC_NAME, round(value,2) VALUE , METRIC_UNIT
from v$sysmetric_history
where metric_name in
('Average Synchronous Single-Block Read Latency')
order by begin_time;

prompt Storage LAtency - Average Single Block Read Latency for Past 1 mins
Prompt ============================================================================================================== 

select to_char(BEGIN_TIME,'DD-MON-YY HH24:Mi:SS')BEGIN_TIME, to_char(END_TIME,'DD-MON-YY HH24:Mi:SS') END_TIME, METRIC_NAME, round(value,2) VALUE , METRIC_UNIT
from v$sysmetric
where metric_name in
('Average Synchronous Single-Block Read Latency')
order by METRIC_NAME;

set lines 500 pages 500
col BEGIN_INTERVAL_TIME for a30
col METRIC_NAME for a50
col METRIC_UNIT for a30

select to_char(BEGIN_TIME,'DD-MON-YY HH24:Mi:SS')BEGIN_TIME, to_char(END_TIME,'DD-MON-YY HH24:Mi:SS') END_TIME, METRIC_NAME, round(MINVAL,2) MIN_VAL, round(MAXVAL,2) MAX_VAL , round(AVERAGE,2) AVG_VAL, METRIC_UNIT
from v$sysmetric_summary
where metric_name in
('Average Synchronous Single-Block Read Latency',
--'I/O Megabytes per Second','Redo Generated Per Sec',
--'Physical Read Total Bytes Per Sec',
--'Physical Read Bytes Per Sec',
--'Physical Write Total Bytes Per Sec',
--'Physical Write Bytes Per Sec',
'Average Active Sessions')
order by METRIC_NAME;


prompt Checking SQL_ID running from number of session and max time taken for that SQLID ..................
Prompt ==============================================================================================================
/*
select sql_id,event,machine,username,status,count(*),max(last_call_et)  from v$session
where status='ACTIVE' and sql_id is not null
group by sql_id,event,machine,username,status
having count(*)>=1
order by 7 ;
*/

col COMMAND_NAME for a14
col event for a25
select s.sql_id,c.command_name,substr(s.event,1,25) event,s.machine,s.username,s.status,count(*),max(s.last_call_et)
from v$session s,v$sqlcommand c
where s.command=c.command_type
and s.status='ACTIVE'
and s.type='USER'
and s.sql_id is not null
and s.USERNAME is not null
and s.event not like 'SQL*Net message%'
group by s.sql_id,c.command_name,s.event,s.machine,s.username,s.status
having count(*)>=1
order by 8 ;


!uptime